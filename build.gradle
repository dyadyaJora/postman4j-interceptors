plugins {
    id 'java'
    id 'application'
    alias(libs.plugins.com.netflix.nebula.javadoc.jar)
    alias(libs.plugins.com.netflix.nebula.source.jar)
    alias(libs.plugins.com.netflix.nebula.maven.publish)
    alias(libs.plugins.com.netflix.nebula.maven.developer)
    alias(libs.plugins.com.netflix.nebula.contacts)
    alias(libs.plugins.org.jreleaser)
    alias(libs.plugins.com.github.ben.manes.versions)
}

group = 'dev.jora.postman4j'

repositories {
    mavenCentral()
    gradlePluginPortal()
}


subprojects {
    apply plugin: 'java'

    if (project.name == 'postman4j-models' || project.name == 'hc5-interceptor'|| project.name == 'spring-interceptor') {
        apply plugin: 'com.netflix.nebula.contacts'
        apply plugin: 'com.netflix.nebula.javadoc-jar'
        apply plugin: 'com.netflix.nebula.source-jar'
        apply plugin: 'com.netflix.nebula.maven-publish'
        apply plugin: 'com.netflix.nebula.maven-developer'
        apply plugin: 'org.jreleaser'
        apply plugin: 'application'

        ext {
            stagingDirName = 'staging-deploy'
        }

        publishing {
            publications {
                nebula(MavenPublication) {
                    pom {
                        url.set(findProperty('projectRepoUrl'))

                        licenses {
                            license {
                                name.set("The MIT License")
                                url.set("https://opensource.org/licenses/MIT")
                                distribution.set("repo")
                            }
                        }


                        scm {
                            connection = 'scm:git:git://github.com/dyadyaJora/postman4j-interceptors.git'
                            developerConnection = 'scm:git:ssh://github.com:dyadyaJora/postman4j-interceptors.git'
                            url = 'https://github.com/dyadyaJora/postman4j-interceptors'
                        }
                    }
                }
            }

            repositories {
                maven {
                    url = layout.buildDirectory.dir(stagingDirName)
                }
            }
        }
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
    }
    dependencies {
        annotationProcessor libs.lombok
        implementation libs.lombok

        testImplementation platform(Testing.junit.bom)
        testImplementation Testing.junit.jupiter
    }

    test {
        useJUnitPlatform()
    }
}


contacts {
    'idyadyajora@gmail.com' {
        moniker 'George Kindra'
        github 'dyadyaJora'
    }
}


jreleaser {
    gitRootSearch = true
    project {
        copyright = 'jora.dev'
        description = 'Postman collection models for postman4j.'
    }
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = 'public.key'
        secretKey = 'private.key'
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository("postman4j/build/staging-deploy")
                }
            }
        }
    }
    release {
        github {
            enabled = false
        }
    }
}